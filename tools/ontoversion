#!/usr/bin/env python3
"""Prints version of an ontology to standard output.

This script uses rdflib and the versionIRI tag on an ontology to infer
the version.
"""
import argparse
import sys

import rdflib


def infer_version(iri, version_iri):
    """Infer version from IRI and versionIRI."""
    if str(version_iri[: len(iri)]) == str(iri):
        version = version_iri[len(iri) :]
    else:
        counter = 0
        version_parts = []
        for index, _ in enumerate(iri):
            while iri[index] != version_iri[index + counter]:
                version_parts.append(version_iri[index + counter])
                counter += 1
        version = "".join(version_parts)
    return version.lstrip("/").rstrip("/#")


def main(argv: list = None):
    """Main run function.

    Parameters:
        argv: List of arguments, similar to `sys.argv[1:]`.
            Mainly for testing purposes, since it allows one to invoke the tool
            manually / through Python.

    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "iri",
        metavar="IRI",
        help="IRI/file to OWL source to extract the version from.",
    )
    parser.add_argument(
        "--format", "-f", default="xml", help='OWL format. Default is "xml".'
    )
    try:
        args = parser.parse_args(args=argv)
    except SystemExit as exc:
        sys.exit(exc.code)  # Exit without traceback on invalid arguments

    # Extract base IRI and versionIRI
    graph = rdflib.Graph()
    graph.parse(args.iri.rstrip("/#"), format=args.format)
    iri, version_iri = list(
        graph.subject_objects(
            rdflib.URIRef("http://www.w3.org/2002/07/owl#versionIRI")
        )
    )[0]

    # Infer version from IRI and versionIRI
    version = infer_version(iri, version_iri)

    print(version)


if __name__ == "__main__":
    main()
